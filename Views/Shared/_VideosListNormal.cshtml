@model FileSystemItem

@functions {
    async Task<int> RenderAccordionItem(FileSystemItem item, string rootAccordion = "", int level = 0)
    {
        var guid = Guid.NewGuid();
        var id = "section_" + guid;
        var collapse = "collapse_" + guid;
        var accordion = rootAccordion != "" ? rootAccordion : "accordion_" + guid;
        var path = item.Files.FirstOrDefault()?.FullPath;
        if (path != null)
        {
            path = Directory.GetParent(path)?.FullName;
        }
        var bg = level % 2 == 0 ? "even" : "even-white";

        if (item.Subfolders.Count > 0 || item.Files.Count > 1)
        {
            <div class="accordion-item rounded shadow-sm p-3 my-2 border border-light @bg">
                <h2 class="accordion-header" id="@collapse">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@id" aria-expanded="false" aria-controls="@id" data-bs-parent="#@accordion">
                        <div class="d-flex justify-content-between w-100 me-3">
                            <div>
                                <p>@item.Name</p>
                            </div>
                            <div class="d-none d-md-block">
                                <p>@path</p>
                            </div>
                        </div>
                        <i class="bi-caret-up-fill"></i>
                    </button>
                </h2>
                <div id="@id" class="accordion-collapse collapse" aria-labelledby="@collapse" data-bs-parent="#@accordion">
                    <div class="accordion-body">
                        @{
                            accordion = "accordion_" + Guid.NewGuid();
                        }
                        <hr />
                        <div id="@accordion">
                            @{
                                var subLevel = bg == "even" ? 1 : 0;

                                foreach (var subdir in item.Subfolders.OrderBy(v => v.Name).Select((element, index) => new { Index = index, Element = element }).ToArray())
                                {
                                    subLevel = await RenderAccordionItem(subdir.Element, accordion, subLevel);
                                }
                            }
                        </div>

                        @foreach (var video in item.Files.OrderBy(v => v.Title).Select((element, index) => new { Index = index, Element = element }).ToArray())
                        {
                            var bg_color = bg == "even" ? (video.Index % 2 == 0 ? "even-white" : "even") : (video.Index % 2 == 0 ? "even" : "even-white");
                            <div class="rounded shadow-sm p-3 my-2 d-flex justify-content-between @bg_color">
                                <a asp-action="VideoDetails" asp-route-videoId="@video.Element.ID" class="text-body link-underline link-underline-opacity-0 w-100">@video.Element.Title</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (item.Files.Count == 1)
        {
            var index = item.Files.FirstOrDefault()?.ID;

            <a asp-action="VideoDetails" asp-route-videoId="@index" class="rounded shadow-sm p-3 my-2 d-flex justify-content-between text-body link-underline link-underline-opacity-0 @bg">
                <div>
                    <p>@item.Name</p>
                </div>
                <div class="d-none d-md-block">
                    <p>@path</p>
                </div>
            </a>
        }

        level++;

        return level;
    }
}

<div id="accordion">
    @{
        int level = 0;
        foreach (var rootItem in Model.Subfolders.OrderBy(i => i.Name).Select((element, index) => new { Index = index, Element = element }).ToArray())
        {
            level = await RenderAccordionItem(rootItem.Element, "accordion", level);
        }
    }
</div>