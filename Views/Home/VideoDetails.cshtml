@using NazcaWeb.Models;
@inject IRC ircInstance;
@model NazcaWeb.Models.VideoItem

@{
    ViewData["Title"] = "VideoDetails";
}

<style>
    body {
        background-image: url("../../assets/background.jpg");
        background-repeat: no-repeat;
        background-size: cover;
        background-position: 20% 40%;
        background-attachment: fixed;
    }

    .bookmark {
        background: red;
        position: absolute;
        top: -4px;
        right: 0;
        width: 0;
        height: 80px;
        border-left: 30px solid transparent;
        border-right: 30px solid transparent;
        border-bottom: 30px solid #007bff; /* Kolor zakładki */
        border-radius: 0 0 5px 5px; /* Zakrąglenie dolnego rogu */
        z-index: 1; /* Umieść zakładkę na wierzchu innej zawartości */
    }

    .header-flag {
        position: relative;
	    border-top: 4px solid transparent;
	    border-image: linear-gradient(to right, transparent, transparent, white);
	    border-image-slice: 1;
    }

    .grabor {
        border-top: 4px solid transparent;
	    border-image: linear-gradient(to right, transparent, white);
	    border-image-slice: 1;
    }

    @if (ViewBag.nazcaMode != null && ViewBag.nazcaMode)
    {
        <text>
            tr {
                border-bottom: 2px solid gray;
            }

            .breadcrumb {
                --bs-breadcrumb-divider-color: inherit;
                --bs-breadcrumb-item-active-color: rgba(255, 255, 255, .5);
            }
        </text>
    }
</style>

@if (Model != null)
{
    <div class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "bg-dark bg-opacity-75" : "") text-white p-4 rounded">
        <!-- <h2>@Html.DisplayFor(model => model.Title)</h2> -->
        <h2 id="editableText" ondblclick="makeEditable()">@Model.Title</h2>

        <h5 id="deleted" class="bg-danger px-3 py-2 mt-3 rounded d-none">Aktualnie przeglądane wideo zostało usunięte.</h5>

        <table class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "w-100" : "table table-borderless table-striped") mt-3">
            <tr class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "d-block mt-2 ps-2" : "")">
                <td class="rounded">
                    <h5 class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "text-secondary" : "")">Ścieżka</h5>
                    <div id="filePath">
                        <ol class="breadcrumb">
                            @foreach(var segment in Model.FullPath.Split('\\', StringSplitOptions.RemoveEmptyEntries).Select((v, i) => new { i, v }))
                            {
                                var active = segment.i == Model.FullPath.Split('\\', StringSplitOptions.RemoveEmptyEntries).Length - 1 ? "active" : "";
                                <li class="breadcrumb-item @active">@segment.v</li>
                            }
                        </ol>
                    </div>
                </td>
            </tr>
            <tr @(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "d-block mt-2 ps-2" : "")>
                <td class="rounded">
                    <h5 class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "text-secondary" : "")">Wielkość</h5>
                    <p>@Model.Size</p>
                </td>
            </tr>
            <tr @(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "d-block mt-2 ps-2" : "")>
                <td class="rounded">
                    <h5 class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "text-secondary" : "")">Czas trwania</h5>
                    <p>@Model.Duration.ToString(@"hh\:mm\:ss")</p>
                </td>
            </tr>
            <tr @(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "d-block mt-2 ps-2" : "")>
                <td class="rounded">
                    <h5 class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "text-secondary" : "")">Typ pliku</h5>
                    <p>@Html.DisplayFor(model => model.MimeType)</p>
                </td>
            </tr>
        </table>
        <div class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "mt-3" : "container")">
            <div class="@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "d-flex w-100" : "row")">
                <div class="col"></div>
                <div class="col-4 w-50 d-flex justify-content-end align-items-center grabor mt-2 pt-3">
                    <a href="/Films@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "/Nazca" : "")" id="stopButton" class="btn btn-danger me-2">Anuluj</a>
                    <a id="playButton" class="btn btn-success @if (!ircInstance.ReadyToGo || ircInstance.IsPlaying) { <text>disabled</text> }" onclick="startPlaying()">Odtwórz</a>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <h2 class="text-white">Nieznany plik</h2>
    <hr />
    <h5 class="text-white">Nie znaleziono wybranego filmu!</h5>
}

<script>
    var isThatPlayedVideo = false;
    console.log("Wideo @Model?.ID, ścieżka @Model?.FullPath");
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/videoHub")
        .build();

    connection.on("restorePath", function () {
        clearDiv();
        updateDiv('@Model?.FullPath', false, true);
    });

    connection.on("updateTitle", function (title) {
        const editableText = document.getElementById('editableText');
        editableText.innerText = title;
    });

    connection.on("showDeletedMessage", function(state) {
        const deletedMessage = document.getElementById('deleted');
        deletedMessage.classList.remove(state ? "d-none" : "d-block");
        deletedMessage.classList.add(state ? "d-block" : "d-none");
    });

    connection.on("updateDiv", updateDiv);

    connection.on("clearDiv", clearDiv);

    connection.on("overwriteDiv", function (content, active) {
        var ol = document.getElementById("filePath").querySelector("ol");
        var child = ol.lastElementChild;
        if (content != "")
            child.innerText = content;
        if (active != "")
            child.classList.add(active);
    });

    connection.on("setPlayedVideo", function (active) {
        isThatPlayedVideo = active == '@Model?.ID';
        console.log("Odtwarzane wideo (" + isThatPlayedVideo + ") " + active + ". Moje wideo @Model?.ID");
    });

    connection.on("toggleButtons", function (playButtonState) {
        var playButton = document.getElementById("playButton");
        
        if (playButtonState != null) {
            if (playButtonState)
                playButton.classList.remove("disabled");
            else
                playButton.classList.add("disabled");
        }

        console.log("Ustawiam playButton na " + playButtonState);
    });

    connection.on("setAElementReturn", function (state) {
        var stopButton = document.getElementById("stopButton");
        if (stopButton != null) {
            if (state || !isThatPlayedVideo) {
                stopButton.removeAttribute("onclick");
                stopButton.setAttribute("href", "/Films@(ViewBag.nazcaMode != null && ViewBag.nazcaMode ? "/Nazca" : "")");
                console.log("Ustawiam parametry przycisku (cofanie) na onclick=" + stopButton.getAttribute("onclick") + ", href=" + stopButton.getAttribute("href"));
            }
            else {
                stopButton.setAttribute("onclick", "stopPlaying()");
                stopButton.removeAttribute("href");
                console.log("Ustawiam parametry przycisku (anulowanie) na onclick=" + stopButton.getAttribute("onclick") + ", href=" + stopButton.getAttribute("href"));
            }
        }

        console.log("Ustawiam playButton na " + playButtonState);
    });

    // Rozpoczęcie połączenia z hubem
    connection.start()
        .then(function () {
            console.log("Połączenie z hubem nawiązane");
        })
        .catch(function (err) {
            console.error("Błąd podczas nawiązywania połączenia z hubem:", err);
        });

    function startPlaying() {
        // Wywołanie żądania AJAX
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/PlayVideo', true);
        xhr.setRequestHeader('Content-Type', 'application/json');

        xhr.onload = function () {
            if (xhr.status >= 200 && xhr.status < 400) {
                console.log("Pomyślnie uruchomiono przetwarzanie filmu @Model?.Title");
            } else {
                console.error("Błąd podczas wywoływania żądania AJAX");
            }
        };
        xhr.onerror = function () {
            console.error("Błąd podczas wywoływania żądania AJAX");
        };
        xhr.send(JSON.stringify({ videoId: '@Model?.ID' }));
    }

    function stopPlaying() {
        if (isThatPlayedVideo) {
            // Wywołanie żądania AJAX
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/StopVideo', true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 400) {
                    console.log("Anulowano przetwarzanie filmu @Model?.Title");
                } else {
                    console.error("Błąd podczas wywoływania żądania AJAX");
                }
            };
            xhr.onerror = function () {
                console.error("Błąd podczas wywoływania żądania AJAX");
            };
            xhr.send(JSON.stringify({ path: '@Model?.FullPath' }));

            var ol = document.getElementById("filePath").querySelector("ol");
            while (ol.firstChild) {
                ol.removeChild(ol.firstChild);
            }
            var segments = "@Model?.FullPath".split('\\').filter(function (segment) {
                return segment.trim() !== '';
            });
            segments.forEach(function (segment, index) {
                var active = index === segments.length - 1 ? "active" : "";
                var li = document.createElement("li");
                li.classList.add("breadcrumb-item");
                if (active != "")
                    li.classList.add(active);
                li.textContent = segment;
                ol.appendChild(li);
            });
        }
    }

    function updateDiv(content, active, lastActive, force) {
        if (isThatPlayedVideo || force) {
            var ol = document.getElementById("filePath").querySelector("ol");
            var segments = content.split('\\').filter(function (segment) {
                return segment.trim() !== '';
            });

            segments.forEach(function (segment, index) {
                if (lastActive && index == segments.length - 1) {
                    active = "active";
                }
                ol.appendChild(getLiElement(segment, active));
            });

            if (content != '@Model?.FullPath' && !force)
                ol.appendChild(getLiElement("", false));
        }
    }

    function getLiElement(content, active) {
        var li = document.createElement("li");
        li.classList.add("breadcrumb-item");
        if (active != "") {
            li.classList.add(active);
        }
        li.textContent = content;
        
        return li;
    }

    function clearDiv(force) {
        if (isThatPlayedVideo || force) {
            var ol = document.getElementById("filePath").querySelector("ol");
            while (ol.firstChild) {
                ol.removeChild(ol.firstChild);
            }
        }
    }

    function makeEditable() {
        const editableText = document.getElementById('editableText');
        editableText.innerHTML = '<input type="text" id="editField" value="' + editableText.innerText + '"/>';
        const editField = document.getElementById('editField');
        editField.focus();

        // Obsługa zapisywania zmian po naciśnięciu Enter
        editField.addEventListener('keyup', function(event) {
            if (event.key === 'Enter') {
                saveChanges();
            }

            if (event.key === 'Escape') {
                cancelChanges();
            }
        });

        // Obsługa anulowania zmian po opuszczeniu pola edycyjnego
        editField.addEventListener('blur', function() {
            cancelChanges();
        });
    }

    function saveChanges() {
        const editField = document.getElementById('editField');
        const newText = editField.value;

        // Tutaj wykonaj żądanie AJAX, aby zapisać zmiany
        // Przykład użycia fetch:
        fetch('/ChangeFileName', {
            method: 'POST',
            body: JSON.stringify({ videoId: '@Model?.ID', newName: newText }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            const editableText = document.getElementById('editableText');
            if (data.name == null || data.name == "") {
                cancelChanges();
                return;
            }
            editableText.innerHTML = data.name;
            clearDiv(true);
            updateDiv(data.path, false, true, true);
        })
        .catch(error => {
            console.error('Błąd AJAX:', error);
            cancelChanges();
        });
    }

    function cancelChanges() {
        const editableText = document.getElementById('editableText');
        const editField = document.getElementById('editField');
        editableText.innerHTML = editField.defaultValue; // Przywróć pierwotny tekst
    }
</script>