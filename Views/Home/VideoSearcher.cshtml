@model FileSystemItem

@{
    ViewData["Title"] = "VideoSearcher";
}

<style>
    .even {
        background-color: rgba(220, 220, 220);
    }

    .even-white {
        background-color: rgba(255, 255, 255, 0.9);
    }

    .accordion-button .bi-caret-up-fill {
        transition: transform 0.3s ease-in-out;
    }

    .accordion-button.collapsed .bi-caret-up-fill{
        transform: rotate(-180deg);
        transition: transform 0.3s ease-in-out;
    }

    body {
        background-image: url("../../assets/background.jpg");
        background-repeat: no-repeat;
        background-size: cover;
        background-position: 20% 40%;
        background-attachment: fixed;
    }

    .custom-button {
        background-color: white;
        color: black;
        transition: all 0.3s, color 0.3s;
    }

    .custom-button:hover {
        background-color: #343a40;
        color: white;
    }

    .btn-check + .btn {
        transition: all 0.3s ease-in-out;
    }

    .btn-check:checked + .btn {
        height: 110%;
    }
</style>

<form action="VideoSearcher" method="post">
    <div class="input-group">
        <input type="text" class="form-control" name="search" placeholder="Wyszukaj..." aria-label="Wyszukaj..." aria-describedby="search-button">
        <button class="btn custom-button" type="submit" id="search-button">
            <i class="bi bi-search"></i>
        </button>
        <div class="form-check form-check-inline mx-0 px-0 ms-3">
            <input type="radio" class="btn-check" name="options-outlined" id="success-outlined" autocomplete="off" value="directory" checked>
            <label class="btn btn-outline-light bi-folder-fill" for="success-outlined"></label>
        </div>
        <div class="form-check form-check-inline mx-0 px-0">
            <input type="radio" class="btn-check" name="options-outlined" id="danger-outlined" autocomplete="off" value="file">
            <label class="btn btn-secondary bi-file-earmark-fill" for="danger-outlined"></label>
        </div>
    </div>

    <div class="row justify-content-end mb-3">
        <div class="col-auto">
            
        </div>
    </div>
</form>

@if (Model == null || !(Model.Subfolders.Any() || Model.Files.Any()))
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Tytuł
                </th>
                <th>
                    @*@Html.DisplayNameFor(model => model["groupedFiles"].FullPath)*@
                    Ścieżka
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td colspan="2">
                    Brak danych
                </td>
            </tr>
        </tbody>
    </table>
}
else
{
    @*var lastSeries = "";
    foreach (var item in Model) {
        var firstFlag = true;
        var current = System.IO.Path.GetFileNameWithoutExtension(item.FullPath);
        var parent = Directory.GetParent(item.FullPath).Name;
        if (current.Contains(parent))
        {
            firstFlag = lastSeries != parent;
            lastSeries = parent;
            var final = item.Title.Replace(parent, "Odcinek");
            if (firstFlag)
            {
                <tr><td colspan="2">@Html.DisplayFor(modelItem => parent)</td></tr>
            }
            <tr>
                <td>@Html.DisplayFor(modelItem => final)</td>
                <td>
                    @{
                        var elems = item.FullPath.Split('\\').ToList();
                        elems.RemoveRange(0, 2);
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                @foreach (var el in elems)
                                {
                                    <li class="breadcrumb-item" aria-current="page">@Html.DisplayFor(modelItem => el)</li>
                                }
                            </ol>
                        </nav>
                    }
                    @Html.DisplayFor(modelItem => item.FullPath)
                </td>
            </tr>
        }
        <td>
            @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
        </td>
    }*@

    <div id="listContent">
        @if (ViewBag.nazcaMode != null && ViewBag.nazcaMode == true)
        {
            <partial name="~/Views/Shared/_VideosListNazca.cshtml" />
        }
        else
        {
            <partial name="~/Views/Shared/_VideosListNormal.cshtml" />
        }
    </div>
}

<script>

    var radioButtons = document.querySelectorAll('.btn-check');

    radioButtons.forEach(function (radioButton) {
        radioButton.addEventListener('change', function () {
            radioButtons.forEach(function (rb) {
                if (rb.checked) {
                    rb.nextElementSibling.classList.remove('btn-secondary');
                    rb.nextElementSibling.classList.add('btn-outline-light');

                    updateVideosList(radioButton.value);
                } else {
                    rb.nextElementSibling.classList.remove('btn-outline-light');
                    rb.nextElementSibling.classList.add('btn-secondary');
                }
            });
        });
    });

    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/videoHub")
        .build();

    connection.start()
        .then(function () {
            console.log("Połączenie z hubem nawiązane");
        })
        .catch(function (err) {
            console.error("Błąd podczas nawiązywania połączenia z hubem:", err);
        });

    connection.on("updateVideosList", updateVideosList);

    function updateVideosList(order = '') {
        //var accordion = document.getElementById('listContent');
        //accordion.innerHTML = "";

        @{
            //VideoModel.GroupedFiles.Files.Add(new VideoItem("BURAK"));
            //var result = (await VideoModel.RenderAccordionItem(VideoModel.GroupedFiles, "accordion")).html;
            //Console.WriteLine("Powtamtam: \n" + string.Join(", ", VideoModel.GroupedFiles.Files.Select(o => o.Title)));
        }

        $.ajax({
            url: '/GetNewList?nazca=@ViewBag.nazcaMode' + (order != '' ? '&videosOrder=' + order : ''),
            method: 'GET',
            success: function (result) {
                $('#listContent').html(result);
            }
        });

        //if ("ViewBag.nazcaMode" != null && "ViewBag.nazcaMode" == true) {
        //    console.log("Dla Nazci");
        //    accordion.innerHTML = 'Html.Raw(await VideoModel.RenderNazcaAccordionItem(VideoModel.GroupedFiles, "accordion"))';
        //}
        //else {
        //    console.log("Dla PC");
        //    var html = 'Html.Raw(result)';
        //    console.log(html);
        //    accordion.innerHTML = html;
        //}
    }
</script>